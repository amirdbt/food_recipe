{"version":3,"sources":["Recipe.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","console","log","recipe","key","url","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAgBeA,G,MAdA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC5B,OACI,yBAAKC,UAAU,uDACX,4BAAKH,GACL,4BACKE,EAAYE,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAIxB,yBAAKC,IAAKN,EAAOO,IAAI,YCoDlBC,EA5DH,WACR,IADc,EAIgBC,mBAAS,IAJzB,mBAIPC,EAJO,KAIEC,EAJF,OAKcF,mBAAS,IALvB,mBAKPG,EALO,KAKCC,EALD,OAMYJ,mBAAS,WANrB,mBAMPK,EANO,KAMAC,EANA,KAQdC,qBAAU,WACNC,MACD,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OACWL,EADX,mBAZjB,WAYiB,oBAXhB,qCAUG,cACTM,EADS,gBAIIA,EAASC,OAJb,OAITC,EAJS,OAKfX,EAAWW,EAAKC,MALD,2CAAH,qDAmBhB,OACI,yBAAKrB,UAAU,OACX,0BAAMsB,SARO,SAAAC,GACjBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,MAMF,2BACIc,KAAK,OACLzB,UAAU,mCACV0B,MAAOhB,EACPiB,SAnBK,SAAAJ,GAAM,IACfG,EAAUH,EAAEK,OAAZF,MACRf,EAAUe,GACVG,QAAQC,IAAIpB,MAkBJ,4BACIe,KAAK,SACLzB,UAAU,oCAFd,WAQHQ,EAAQP,KAAI,SAAA8B,GAAM,OACf,kBAAC,EAAD,CACIC,IAAKD,EAAOA,OAAOE,IACnBpC,MAAOkC,EAAOA,OAAOG,MACrBpC,MAAOiC,EAAOA,OAAOjC,MACrBC,YAAagC,EAAOA,OAAOhC,mBC7C3BoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb756143.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Recipe = ({ title, image, ingredients }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n\r\n            <img src={image} alt=\"food\" />\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe\r\n","import React, { useState, useEffect } from \"react\"\nimport \"./App.css\"\nimport Recipe from \"./Recipe\"\n\nconst App = () => {\n    const APP_ID = \"8f3d0dee\"\n    const APP_KEY = \"108afd22bc6e610b8f77a32d1973551f\"\n\n    const [recipes, setRecipes] = useState([])\n    const [search, setSearch] = useState(\"\")\n    const [query, setQuery] = useState(\"chicken\")\n\n    useEffect(() => {\n        getRecipes()\n    }, [query])\n\n    const getRecipes = async () => {\n        const response = await fetch(\n            `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n        )\n        const data = await response.json()\n        setRecipes(data.hits)\n    }\n    const handleChange = e => {\n        const { value } = e.target\n        setSearch(value)\n        console.log(search)\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        setQuery(search)\n        setSearch(\"\")\n    }\n\n    return (\n        <div className=\"App\">\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    className=\"pa3 ba b--green bg-lightest-blue\"\n                    value={search}\n                    onChange={handleChange}\n                />\n                <button\n                    type=\"submit\"\n                    className=\"pa3 ba b--green bg-lightest-blue\"\n                >\n                    Search\n                </button>\n            </form>\n\n            {recipes.map(recipe => (\n                <Recipe\n                    key={recipe.recipe.url}\n                    title={recipe.recipe.label}\n                    image={recipe.recipe.image}\n                    ingredients={recipe.recipe.ingredients}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"tachyons\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}